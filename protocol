Data structure:
user: loginName:string, name:string, password:string, sessionID:string, expire:number(time stamp)

driverrepeatedpost: userID: string, lat: number, long: number, availableSeats: {}, maxSeats: number, semester:string, type: number
example: {userID: "sdf", availableSeats: {"110":4, "310":4}, type:0 } 
tyep:0 indicate that this is a ride to school
    otherwise, type:0 indicating a ride from school to other places
availableSeats:{"110":4, "310":4} indicate that departure time is at 10 AM at Monday and Wednsday. Both available seats are 4
we constrains the departure time from 8 AM to 8PM, other time not allowed.

driveradditionalpost: userID: string, lat: number, long: number, date: Number, time: string, maxSeats: number, availableSeats: number,type: number
drivercanceledpost: userID: string, date:string, postID:string, time: string

repeatedapplication: userID: string, driverPostID: [string], day: string, time: string, passengerNumber: number, status:[number]
additionalapplication: userID: string, driverPostID: [string], status:[number], passengerNumber: number
    status's value could be: 
        0 --- waiting
        1 --- accept
        2 --- declined
        3 --- invalid


Protocol:
response body: {error: {code: number, error: string}}
request body: {sessionID: string(except login), userID: string}

-----FOR ALL USERS-----

login: POST /login
client to server: userId: string, password: string
server to client: userID: string, sessionID: string, name: string

refresh: POST /refresh
client to server: sessionID: string, userID: string
server to client: repeatedPost:[], additionalPost:[], cancellationPost:[], repeatedApplication:[], additionalApplication:[], repeatApplicationForPost:[], addApplicationForPost:[]


-----FOR PASSENGER------

repeatedPanel: POST /repeatedPanel
client to server: sessionID: string, userID: string, semester: string, lat: number, long: number, range: number, passengerNumber: number
server to client: availableSeats:[ day:[driver number for each time], day:[]]
example: [[], [[1, 3, 4, 2, ], ....[]]
//passenger request driver repeated post data (filter only posts within range to specified location, and specified semester and specified passenger number)
        
singlePanel: POST /singlePanel
client to server: sessionID: string, userID: string, startDate: string, endDate: string, lat: number, long: number, range: number, passengerNumber: number
server to client: availableSeats: {date: [driver number for each time]}
//passenger request driver single post data

repeatedDriverList: POST /repeatedDriverList
client to server: sessionID: string, userID: string, day: number, time: string, lat: number, long: number, range: number, passengerNumber: number
server to client: user:[{userID:string, name: string, availableSeats: number, lat: number, long: number, postID: string} {}]
//passenger click on a time block, show all posts at that time

singleDriverList: POST /singleDriverList
client to server: sessionID: string, userID: string, date: string, time: string, lat: number, long: number, range: number, passengerNumber: number
server to client: user: [{userID:string, name: string, availableSeats: number, postID: string}]
//passenger click on a time block, show all posts at that time

repeatedApply: POST /repeatedApply
client to server: sessionID: string, userID: string, application: [{day:string, time: string, postID:[if empty, select all]}, {}]
server to client: result:[{applicationID:string, postID: string, status: number}]
//passendger click on a post or a time block, make an application associated with the post or time block

singleApply: POST /singleApply
client to server: sessionID: string, userID: string, application: [{date: string, time: string, postID:[]}, {}]
server to client: result: [{applicationID: string, postID: string, status: number}]
//passendger click on a post or a time block, make an application associated with the post or time block


withdrawApplication: POST /withdrawApplication
client to server: applicationID: string
server to client:


-----FOR DRIVER-------

driverResponse: POST /driverResponse
client to server: sessionID: string, userID: string, applicationID: string, status: number
server to client: 

repeatedDriverPost: POST /repeatedDriverPost
client to server: sessionID: string, userID: string, lat: number, long: number, time: [[string], [string]], seatNumber: number, semester: string
server to client:

additionalDriverPost: POST /additionalDriverPost
client to server: sessionID: string, userID: string, lat: number, long: number, date: string, time: string, seatNumber: number
server to client:

revertDriverRepeatedPost: DEL /revertDriverRepeatedPost
client to server: postID: string
server to client:

driverCancelRepeatedPost: POST /driverCancelRepeatedPost
client to server: postID: string, day: int, time: string
server to client:

driverDeleteSinglePost: DEL /driverCancelSinglePost
client to server: postID: string
server to client:

revertRepeatedCancellation: POST /revertRepeatedCancellation
client to server: postID: string
server to client: